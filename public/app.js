const firebaseConfig = {
  apiKey: "AIzaSyDp3HumzdoZ6SWWQX6wPLmk0RzYl0qPbjs",
  authDomain: "decisiontinderfirebase.firebaseapp.com",
  projectId: "decisiontinderfirebase",
  storageBucket: "decisiontinderfirebase.appspot.com",
  messagingSenderId: "743649100420",
  appId: "1:743649100420:web:18f276d16d855241dbf8d1",
  measurementId: "G-2T7C1GQFXF"
};

const app = firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

console.log("üî• Firebase inicializ√°lva");

// Adatb√°zis tartalom ki√≠r√°sa
async function logDatabaseContents() {
  try {
    const [sessionsSnap, swipesSnap, topicsSnap] = await Promise.all([
      db.collection("session").get(),
      db.collection("swipes").get(),
      db.collection("topics").get()
    ]);
    
    console.log(`üìä [DB] Jelenlegi adatb√°zis √°llapot:`);
    console.log(`   üìÇ Sessions: ${sessionsSnap.size} db`);
    console.log(`   üìÇ Swipes: ${swipesSnap.size} db`);
    console.log(`   üìÇ Topics: ${topicsSnap.size} db`);
    
    topicsSnap.forEach(doc => {
      const items = doc.data().items || [];
      console.log(`   üìñ Topic "${doc.id}": ${items.length} elem - [${items.slice(0, 3).join(', ')}${items.length > 3 ? '...' : ''}]`);
    });
  } catch (error) {
    console.log(`‚ö†Ô∏è [DB] Nem siker√ºlt bet√∂lteni az adatb√°zis tartalmat:`, error.message);
  }
}

// 1 m√°sodperc m√∫lva ki√≠rjuk az adatb√°zis tartalmat
setTimeout(logDatabaseContents, 1000);

// --- Glob√°lis v√°ltoz√≥k ---
let topics = {};
let currentTopic = null;
let currentItems = [];
let currentIndex = 0;
let votes = {};
let decidedItems = new Set();
let userId = null;
let sessionId = "global";
let accepted = [];
let unsubscribeTopicListener = null;
let unsubscribeMatchListener = null;
let wasJustDragging = false;
let currentlyOpenListItem = null;
let lastActivityTimestamp = Date.now();

// Rejtett admin funkci√≥
let secretClickCount = 0;
let secretClickTimer = null;

// Hozz√°adott elemek k√∂vet√©se userid szerint - hogy ne kapjon modal a hozz√°ad√≥
let userAddedItems = new Set();

// --- Seg√©d ---
function generateUserId() {
  return 'user_' + Math.random().toString(36).substr(2, 9);
}

function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
}

function getRandomPastelColor() {
  const hue = Math.floor(Math.random() * 360);
  return `hsl(${hue}, 30%, 40%)`;
}

function getSessionIdFromURL() {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get('session');
}

function updateActivity() {
  lastActivityTimestamp = Date.now();
}

// --- Rejtett admin funkci√≥ (5x gyors kattint√°s az "Eredm√©nyek" c√≠mre) ---
async function secretAdminCleanup() {
  try {
    console.log(`üî• [SECRET] ADMIN CLEANUP MEGKEZD√âSE - MINDEN ADAT T√ñRL√âSE`);
    
    // 1. Minden session t√∂rl√©se
    const sessionsSnapshot = await db.collection("session").get();
    console.log(`üóëÔ∏è [SECRET] ${sessionsSnapshot.size} db session t√∂rl√©se...`);
    
    const sessionBatch = db.batch();
    sessionsSnapshot.forEach(doc => {
      sessionBatch.delete(doc.ref);
    });
    await sessionBatch.commit();
    
    // 2. Minden swipe t√∂rl√©se
    const swipesSnapshot = await db.collection("swipes").get();
    console.log(`üóëÔ∏è [SECRET] ${swipesSnapshot.size} db swipe t√∂rl√©se...`);
    
    const swipesBatch = db.batch();
    swipesSnapshot.forEach(doc => {
      swipesBatch.delete(doc.ref);
    });
    await swipesBatch.commit();
    
    // 3. Lok√°lis adatok t√∂rl√©se
    localStorage.removeItem("swipy_user_id");
    
    console.log(`‚úÖ [SECRET] TELJES CLEANUP BEFEJEZVE - ${sessionsSnapshot.size} session, ${swipesSnapshot.size} swipe t√∂r√∂lve`);
    
    // Visszajelz√©s a usernek
    alert(`üî• ADMIN CLEANUP K√âSZ!\n\nT√∂r√∂lve:\n- ${sessionsSnapshot.size} session\n- ${swipesSnapshot.size} swipe\n- localStorage adatok\n\nOldal √∫jrat√∂lt√©se...`);
    
    // Oldal √∫jrat√∂lt√©se
    window.location.reload();
    
  } catch (error) {
    console.error(`‚ùå [SECRET] Hiba az admin cleanup-ban`, error);
    alert(`‚ùå Hiba t√∂rt√©nt: ${error.message}`);
  }
}

function handleSecretClick() {
  secretClickCount++;
  console.log(`ü§´ [SECRET] Rejtett kattint√°s ${secretClickCount}/5`);
  
  // Timer t√∂rl√©se √©s √∫jraind√≠t√°sa
  if (secretClickTimer) {
    clearTimeout(secretClickTimer);
  }
  
  // Ha 5 kattint√°s 3 m√°sodpercen bel√ºl
  if (secretClickCount >= 5) {
    console.log(`üî• [SECRET] 5 kattint√°s el√©rve - admin cleanup aktiv√°l√°sa!`);
    secretClickCount = 0;
    secretAdminCleanup();
    return;
  }
  
  // 3 m√°sodperc ut√°n reset
  secretClickTimer = setTimeout(() => {
    console.log(`‚è∞ [SECRET] Timeout - counter reset`);
    secretClickCount = 0;
  }, 3000);
}

// --- Egyszer≈± session kezel√©s (heartbeat n√©lk√ºl) ---
async function joinSession() {
  try {
    // User hozz√°ad√°sa a session-hoz
    await db.collection("session").doc(sessionId).update({
      [`active_users.${userId}`]: firebase.firestore.FieldValue.serverTimestamp()
    });
    console.log(`üöÄ [SESSION] User csatlakozott - userId: ${userId}, sessionId: ${sessionId}`);
  } catch (error) {
    console.error(`‚ùå [SESSION] Hiba a csatlakoz√°sn√°l - userId: ${userId}`, error);
  }
}

async function leaveSession() {
  try {
    console.log(`üö™ [SESSION] User kil√©p√©si k√≠s√©rlet - userId: ${userId}, sessionId: ${sessionId}`);
    
    // User elt√°vol√≠t√°sa a session-b√≥l
    await db.collection("session").doc(sessionId).update({
      [`active_users.${userId}`]: firebase.firestore.FieldValue.delete()
    });
    console.log(`‚úÖ [SESSION] User sikeresen kil√©pett - userId: ${userId}`);
    
    // Ellen≈ërizz√ºk, hogy maradt-e m√©g valaki
    await checkIfSessionEmpty();
  } catch (error) {
    console.log(`‚ö†Ô∏è [SESSION] Session m√°r nem l√©tezik vagy hiba t√∂rt√©nt - ${error.message}`);
  }
}

async function checkIfSessionEmpty() {
  try {
    const sessionDoc = await db.collection("session").doc(sessionId).get();
    if (!sessionDoc.exists) {
      console.log(`üì≠ [SESSION] Session m√°r nem l√©tezik - sessionId: ${sessionId}`);
      return;
    }
    
    const data = sessionDoc.data();
    const activeUsers = data.active_users || {};
    const userCount = Object.keys(activeUsers).length;
    
    console.log(`üë• [SESSION] Akt√≠v userek sz√°ma: ${userCount}, users: [${Object.keys(activeUsers).join(', ')}]`);
    
    // Ha nincs akt√≠v user, t√∂r√∂lj√ºk a sessiont
    if (userCount === 0) {
      console.log(`üóëÔ∏è [SESSION] Session √ºres, t√∂rl√©s megkezd√©se - sessionId: ${sessionId}`);
      await deleteSession();
    }
  } catch (error) {
    console.error(`‚ùå [SESSION] Hiba az √ºres session ellen≈ërz√©sben`, error);
  }
}

async function deleteSession() {
  try {
    console.log(`üóëÔ∏è [SESSION] Session t√∂rl√©se megkezdve - sessionId: ${sessionId}`);
    
    // Session t√∂rl√©se
    await db.collection("session").doc(sessionId).delete();
    console.log(`‚úÖ [SESSION] Session dokumentum t√∂r√∂lve - sessionId: ${sessionId}`);
    
    // Kapcsol√≥d√≥ swipe-ok t√∂rl√©se
    const swipesSnapshot = await db.collection("swipes")
      .where("session", "==", sessionId)
      .get();
      
    console.log(`üßπ [SESSION] ${swipesSnapshot.size} db swipe dokumentum t√∂rl√©se...`);
    
    const batch = db.batch();
    swipesSnapshot.forEach(doc => {
      batch.delete(doc.ref);
    });
    await batch.commit();
    
    console.log(`‚úÖ [SESSION] Session √©s ${swipesSnapshot.size} db swipe t√∂r√∂lve - sessionId: ${sessionId}`);
  } catch (error) {
    console.error(`‚ùå [SESSION] Hiba a session t√∂rl√©sekor`, error);
  }
}

function addInstantClick(element, callback) {
  if (!element) return;
  let touchMoved = false;
  element.addEventListener('touchstart', () => { touchMoved = false; }, { passive: true });
  element.addEventListener('touchmove', () => { touchMoved = true; }, { passive: true });
  element.addEventListener('touchend', (e) => { if (!touchMoved) { e.preventDefault(); callback(e); } });
  element.addEventListener('click', (e) => { if ('ontouchend' in document.documentElement) return; callback(e); });
}

// --- K√©perny≈ë ---
function showScreen(screenId) {
  ["screen-topic", "screen-swipe", "screen-match"].forEach(id => {
    const el = document.getElementById(id);
    if (el) el.classList.toggle('active-screen', id === screenId);
  });
}

// --- √öj item modal ---
function showNewItemModal(item) {
  const modalEl = document.getElementById('pendingVoteModal');
  if (!modalEl) return;
  modalEl.querySelector('#pendingItemText').textContent = item;
  const modal = new bootstrap.Modal(modalEl);
  modal.show();
  
  console.log(`üÜï [MODAL] √öj elem modal megjelen√≠tve: "${item}"`);
}

// --- T√©m√°k bet√∂lt√©se ---
async function loadTopics() {
  try {
    console.log(`üìö [TOPICS] T√©m√°k bet√∂lt√©se kezd≈ëdik...`);
    
    const snapshot = await db.collection("topics").get();
    topics = {};
    
    snapshot.forEach(doc => {
      const items = doc.data().items || [];
      topics[doc.id] = items;
      console.log(`üìñ [TOPICS] "${doc.id}" bet√∂ltve - ${items.length} elem`);
    });
    
    const topicSelect = document.getElementById("topic");
    topicSelect.innerHTML = "";
    
    Object.keys(topics).forEach(topic => {
      const opt = document.createElement("option");
      opt.value = topic;
      opt.innerText = topic;
      topicSelect.appendChild(opt);
    });
    
    console.log(`‚úÖ [TOPICS] ${Object.keys(topics).length} t√©ma sikeresen bet√∂ltve: [${Object.keys(topics).join(', ')}]`);
  } catch (error) {
    console.error(`‚ùå [TOPICS] Hiba a t√©m√°k bet√∂lt√©sekor`, error);
  }
}

// --- Session st√°tusz ellen≈ërz√©s ---
async function checkSessionStatus() {
  try {
    console.log(`üîç [INIT] Session st√°tusz ellen≈ërz√©se - sessionId: ${sessionId}, userId: ${userId}`);
    
    const doc = await db.collection("session").doc(sessionId).get();
    if (doc.exists && doc.data().topic) {
      // Van akt√≠v session -> csatlakozunk
      currentTopic = doc.data().topic;
      const activeUsers = Object.keys(doc.data().active_users || {});
      
      console.log(`üìã [INIT] Akt√≠v session tal√°lva - topic: ${currentTopic}, activeUsers: [${activeUsers.join(', ')}]`);
      
      await joinSession(); // Jelezz√ºk, hogy csatlakoztunk
      
      // Bet√∂ltj√ºk a kor√°bbi szavazatainkat a szerverr≈ël
      await loadUserVotes();
      
      startTopic(currentTopic);
      
      // Eld√∂ntj√ºk, hogy swipe vagy match k√©perny≈ëre ker√ºlj√ºnk
      if (hasUserFinishedVoting()) {
        console.log(`‚úÖ [INIT] User m√°r befejezte a szavaz√°st, match k√©perny≈ë`);
        showScreen("screen-match");
      } else {
        console.log(`üéØ [INIT] User folytatja a szavaz√°st`);
        showScreen("screen-swipe");
      }
    } else {
      // Nincs akt√≠v session -> els≈ë vagyunk, topic v√°laszt√°s
      console.log(`üéØ [INIT] Nincs akt√≠v session, topic v√°laszt√°s mutat√°sa`);
      showScreen("screen-topic");
    }
  } catch (error) {
    console.error(`‚ùå [INIT] Hiba a session st√°tusz ellen≈ërz√©sben`, error);
    showScreen("screen-topic");
  }
}

// --- T√©ma v√°laszt√°s ---
async function onTopicNext() {
  try {
    const topicSelect = document.getElementById("topic");
    currentTopic = topicSelect.value;
    if (!currentTopic) { 
      console.log(`‚ö†Ô∏è [TOPIC] Nincs t√©ma kiv√°lasztva`);
      alert("V√°lassz t√©m√°t!"); 
      return; 
    }

    console.log(`üéØ [TOPIC] √öj session l√©trehoz√°sa - topic: ${currentTopic}, userId: ${userId}`);

    // Session l√©trehoz√°sa
    await db.collection("session").doc(sessionId).set({
      topic: currentTopic,
      last_updated: firebase.firestore.FieldValue.serverTimestamp(),
      active_users: {
        [userId]: firebase.firestore.FieldValue.serverTimestamp()
      }
    });

    console.log(`‚úÖ [TOPIC] Session sikeresen l√©trehozva - sessionId: ${sessionId}, topic: ${currentTopic}`);

    // √öj session eset√©n t√∂rlj√ºk a kor√°bbi szavazatokat
    votes = {};
    accepted = [];
    decidedItems.clear();
    userAddedItems.clear(); // Saj√°t hozz√°adott elemek is t√∂rl≈ëdnek

    startTopic(currentTopic);
    showScreen("screen-swipe");
  } catch (error) {
    console.error(`‚ùå [TOPIC] Hiba a session l√©trehoz√°sban`, error);
    alert("Hiba t√∂rt√©nt a session l√©trehoz√°sakor!");
  }
}

// --- T√©ma listener ---
function startTopicListener(topic) {
  if (unsubscribeTopicListener) unsubscribeTopicListener();

  const topicDocRef = db.collection("topics").doc(topic);
  unsubscribeTopicListener = topicDocRef.onSnapshot(doc => {
    if (!doc.exists) return;
    const newItems = doc.data().items || [];
    const oldItems = topics[topic] || [];
    
    // T√∂r√∂lt elemek detekt√°l√°sa
    const deletedItems = oldItems.filter(item => !newItems.includes(item));
    if (deletedItems.length > 0) {
      console.log(`üóëÔ∏è [TOPIC] T√∂r√∂tt elemek detekt√°lva: [${deletedItems.join(', ')}]`);
      
      // T√∂r√∂lt elemek elt√°vol√≠t√°sa a lok√°lis adatokb√≥l
      deletedItems.forEach(item => {
        if (votes[item]) {
          delete votes[item];
          console.log(`üßπ [TOPIC] T√∂r√∂lt elem szavazata elt√°vol√≠tva: "${item}"`);
        }
        accepted = accepted.filter(i => i !== item);
        decidedItems.delete(item);
      });
      
      // Ha match screen-en vagyunk, friss√≠ts√ºk a list√°t
      if (document.getElementById('screen-match').classList.contains('active-screen')) {
        console.log(`üîÑ [TOPIC] Match lista friss√≠t√©se t√∂rl√©s ut√°n`);
        // A match listener automatikusan friss√≠ti a list√°t
      }
    }
    
    topics[topic] = newItems;

    newItems.forEach(item => {
      // Csak akkor mutassunk modal-t, ha a MATCH screen-en vagyunk √©s √∫j elem √©rkezett
      // √âS a user nem ≈ë maga adta hozz√°
      if (!decidedItems.has(item) && !votes.hasOwnProperty(item) && !userAddedItems.has(item)) {
        decidedItems.add(item);
        
        // Modal csak match screen-en
        if (document.getElementById('screen-match').classList.contains('active-screen')) {
          showNewItemModal(item);
          console.log(`üÜï [TOPIC] √öj elem √©rkezett match screen-en: "${item}"`);
        } else {
          console.log(`üÜï [TOPIC] √öj elem √©rkezett swipe k√∂zben: "${item}" - modal elhalasztva`);
        }
      } else if (userAddedItems.has(item)) {
        console.log(`üö´ [TOPIC] Saj√°t hozz√°adott elem: "${item}" - modal kihagyva`);
        decidedItems.add(item); // Biztos√≠tsuk, hogy decided legyen
      }
    });

    // Ha √∫j elemek √©rkeztek √©s √©pp a swipe screen-en vagyunk, friss√≠ts√ºk a currentItems list√°t
    if (document.getElementById('screen-swipe').classList.contains('active-screen')) {
      const oldLength = currentItems.length;
      currentItems = [...newItems];
      
      if (newItems.length > oldLength) {
        console.log(`üìà [TOPIC] ${newItems.length - oldLength} √∫j elem hozz√°adva a list√°hoz`);
      }
    }
  });
}

// --- Szavazatok realtime listener ---
function startMatchListener() {
  console.log(`üéß [MATCH] Match listener ind√≠t√°sa - topic: ${currentTopic}, userId: ${userId}`);
  console.log(`üìä [MATCH] Saj√°t votes objektum:`, votes);

  if (unsubscribeMatchListener) unsubscribeMatchListener();

  unsubscribeMatchListener = db.collection("swipes")
    .where("session", "==", sessionId)
    .where("topic", "==", currentTopic)
    .onSnapshot(snapshot => {
      if (!document.getElementById('screen-match').classList.contains('active-screen')) return;

      const userSwipes = {}; // userId => { item: vote, ... }
      snapshot.forEach(doc => {
        const data = doc.data();
        userSwipes[data.user] = data.swipes || {};
      });

      const allItems = topics[currentTopic] || [];
      const totalUsers = Object.keys(userSwipes).length;

      console.log(`üìà [MATCH] Szavazatok friss√≠t√©se - ${totalUsers} user, ${allItems.length} item`);

      const voteCounts = {}; // item => h√°ny YES szavazat van
      const ownVotes = votes; // lok√°lis user votes

      let matchSet = new Set(allItems);

      allItems.forEach(item => {
        let yesCount = 0;
        for (const user in userSwipes) {
          if (userSwipes[user][item] === "yes") yesCount++;
          if (userSwipes[user][item] !== "yes") matchSet.delete(item);
        }
        voteCounts[item] = yesCount;
      });

      console.log(`üéØ [MATCH] K√∂z√∂s tal√°latok: [${[...matchSet].join(', ')}] (${matchSet.size} db)`);

      const ownVotesList = document.getElementById("ownVotes");
      ownVotesList.innerHTML = "";

      allItems.forEach(item => {
        const li = document.createElement("li");
        li.className = "list-group-item p-0";
        li.style.position = 'relative';

        const contentWrapper = document.createElement('div');
        contentWrapper.className = "list-item-content d-flex justify-content-between align-items-center p-3";

        const itemTextSpan = document.createElement('span');
        itemTextSpan.textContent = item;

        const badgesWrapper = document.createElement('div');
        badgesWrapper.className = 'd-flex align-items-center';

        // H√°ny YES szavazat
        const countBadge = document.createElement('span');
        countBadge.className = 'badge text-bg-secondary me-2';
        countBadge.innerHTML = `<i class="fas fa-users me-1"></i>${voteCounts[item] || 0}/${totalUsers}`;
        badgesWrapper.appendChild(countBadge);

        // Saj√°t szavazat badge
        const ownVote = ownVotes[item];
        const voteBadge = document.createElement("span");
        if (ownVote === "yes") {
          voteBadge.className = "badge rounded-pill bg-success";
          voteBadge.innerText = "Igen";
        } else if (ownVote === "no") {
          voteBadge.className = "badge rounded-pill bg-danger";
          voteBadge.innerText = "Nem";
        } else {
          voteBadge.className = "badge rounded-pill bg-secondary";
          voteBadge.innerText = "?";
        }
        badgesWrapper.appendChild(voteBadge);

        contentWrapper.appendChild(itemTextSpan);
        contentWrapper.appendChild(badgesWrapper);
        li.appendChild(contentWrapper);

        ownVotesList.appendChild(li);

        // Katt a szavazat v√°lt√°s√°hoz
        addVoteToggleListener(contentWrapper, item, ownVote === "yes");

        // Swipe-to-delete + Firestore t√∂rl√©s
        makeItemDeletable(li, contentWrapper, item);
      });

      const matchResultEl = document.getElementById("matchResult");
      if (matchSet.size > 0) {
        matchResultEl.className = 'alert alert-success text-center flex-shrink-0';
        matchResultEl.innerHTML = `<i class="fas fa-check-circle"></i> K√∂z√∂s v√°laszt√°s: <strong>${[...matchSet].join(", ")}</strong>`;
      } else {
        matchResultEl.className = 'alert alert-warning text-center flex-shrink-0';
        matchResultEl.innerHTML = `<i class="fas fa-hourglass-half"></i> M√©g nincs k√∂z√∂s tal√°lat`;
      }
    });
}


// --- Swipe ---

function handleSwipe(yes) {
  const item = currentItems[currentIndex];
  decidedItems.add(item);

  console.log(`üëçüëé [SWIPE] Szavazat - "${item}": ${yes ? 'IGEN' : 'NEM'} (${currentIndex + 1}/${currentItems.length})`);

  // Szavazat ment√©se a votes objektumba
  votes[item] = yes ? "yes" : "no";

  const card = document.getElementById("card");
  card.classList.add(yes ? "swipe-right" : "swipe-left");

  setTimeout(() => {
    if (yes && !accepted.includes(item)) {
      accepted.push(item);
      console.log(`‚úÖ [SWIPE] "${item}" hozz√°adva az elfogadott list√°hoz`);
    }
    currentIndex++;
    if (currentIndex >= currentItems.length) {
      console.log(`üì§ [SWIPE] Szavaz√°s befejezve, eredm√©nyek k√ºld√©se - elfogadott: [${accepted.join(', ')}]`);
      sendSwipes().then(() => {
        showScreen("screen-match");
        checkMatch();
      });
    } else {
      showNextItem();
    }
  }, 400);
}


function startTopic(topic) {
  console.log(`üèÅ [SWIPE] T√©ma ind√≠t√°sa - topic: ${topic}, userId: ${userId}`);
  
  currentTopic = topic;
  currentItems = [...topics[topic]];
  shuffle(currentItems);
  
  // Keress√ºk meg, hogy hol tartunk a szavaz√°sban
  currentIndex = 0;
  for (let i = 0; i < currentItems.length; i++) {
    if (!votes.hasOwnProperty(currentItems[i])) {
      currentIndex = i;
      break;
    }
  }
  
  // Ha minden elemre szavaztunk, akkor a v√©g√©re √°ll√≠tjuk
  if (currentIndex === 0 && currentItems.length > 0 && votes.hasOwnProperty(currentItems[0])) {
    currentIndex = currentItems.length;
  }
  
  // decidedItems √∫jra√©p√≠t√©se - MINDEN l√©tez≈ë elemet hozz√°adunk
  decidedItems.clear();
  currentItems.forEach(item => {
    decidedItems.add(item);
  });
  
  console.log(`üîÄ [SWIPE] ${currentItems.length} elem keverve - jelenlegi poz√≠ci√≥: ${currentIndex}/${currentItems.length}`);
  console.log(`üìä [SWIPE] Kor√°bbi szavazatok: ${Object.keys(votes).length}, elfogadva: [${accepted.join(', ')}]`);
  console.log(`üéØ [SWIPE] Decided items: [${[...decidedItems].join(', ')}]`);
  
  document.querySelector('#screen-swipe h2').textContent = currentTopic;
  showNextItem();

  startTopicListener(topic);
  startMatchListener();
}

function showNextItem() {
  const card = document.getElementById("card");
  if (currentIndex >= currentItems.length) {
    console.log(`üèÅ [SWIPE] Minden elem eld√∂ntve (${currentItems.length}/${currentItems.length}), √°tv√°lt√°s match k√©perny≈ëre`);
    showScreen("screen-match");
    return;
  }
  
  const item = currentItems[currentIndex];
  console.log(`üëÄ [SWIPE] K√∂vetkez≈ë elem megjelen√≠t√©se - ${currentIndex + 1}/${currentItems.length}: "${item}"`);
  
  document.getElementById("itemText").innerText = item;
  card.style.backgroundColor = getRandomPastelColor();
  card.className = 'card text-center shadow-lg';
  card.style.transform = 'translateX(0) rotate(0deg)';
  card.style.opacity = 1;
  setupSwipeGesture(card);
}

// --- Szavazat k√ºld√©s ---
async function sendSwipes() {
  try {
    const voteCount = Object.keys(votes).length;
    const yesCount = Object.values(votes).filter(v => v === "yes").length;
    
    console.log(`üì§ [VOTES] Szavazatok k√ºld√©se - √∂sszesen: ${voteCount}, igen: ${yesCount}, nem: ${voteCount - yesCount}`);
    
    await db.collection("swipes").doc(`${sessionId}_${userId}`).set({
      user: userId,
      session: sessionId,
      topic: currentTopic,
      swipes: votes,
      timestamp: firebase.firestore.FieldValue.serverTimestamp()
    });
    
    console.log(`‚úÖ [VOTES] Szavazatok sikeresen elk√ºldve - userId: ${userId}, sessionId: ${sessionId}`);
  } catch (error) {
    console.error(`‚ùå [VOTES] Hiba a szavazatok k√ºld√©sekor`, error);
  }
}

// --- Swipe gesztus ---
function setupSwipeGesture(card) {
  let startX = 0, currentX = 0, isDragging = false;
  const onDragStart = (clientX) => { isDragging = true; startX = clientX; card.style.transition = 'none'; };
  const onDragMove = (clientX) => { if (!isDragging) return; currentX = clientX - startX; card.style.transform = `translateX(${currentX}px) rotate(${currentX / 20}deg)`; };
  const onDragEnd = () => {
    if (!isDragging) return; isDragging = false;
    const threshold = card.offsetWidth * 0.4;
    if (currentX > threshold) handleSwipe(true);
    else if (currentX < -threshold) handleSwipe(false);
    else { card.style.transition = 'transform 0.3s ease'; card.style.transform = 'translateX(0) rotate(0deg)'; }
    currentX = 0;
  };
  card.onmousedown = (e) => onDragStart(e.clientX);
  card.onmousemove = (e) => isDragging && onDragMove(e.clientX);
  card.onmouseup = () => isDragging && onDragEnd();
  card.ontouchstart = (e) => onDragStart(e.touches[0].clientX);
  card.ontouchmove = (e) => onDragMove(e.touches[0].clientX);
  card.ontouchend = () => onDragEnd();
}

// --- Swipe to reveal delete ---
function makeItemDeletable(listItem, contentWrapper, itemName) {
  let startX = 0, currentX = 0, isDragging = false, crossedThreshold = false;

  const closeAnyOpen = () => {
    if (currentlyOpenListItem && currentlyOpenListItem !== listItem) {
      currentlyOpenListItem.classList.remove('open');
      currentlyOpenListItem.querySelector('.list-item-content').style.transform = 'translateX(0)';
      currentlyOpenListItem = null;
    }
  };

  const onDragStart = (e) => {
    if (e.type === 'mousedown' && e.button !== 0) return;
    isDragging = true;
    crossedThreshold = false;
    startX = e.touches ? e.touches[0].clientX : e.clientX;
    contentWrapper.style.transition = 'none';

    closeAnyOpen();

    document.addEventListener('mousemove', onDragMove);
    document.addEventListener('mouseup', onDragEnd);
    document.addEventListener('touchmove', onDragMove, { passive: true });
    document.addEventListener('touchend', onDragEnd);
  };

  const onDragMove = (e) => {
    if (!isDragging) return;
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    currentX = clientX - startX;

    if (currentX < -40) crossedThreshold = true;

    if (currentX < 0) {
      contentWrapper.style.transform = `translateX(${currentX}px)`;
    } else if (currentX > 0 && listItem.classList.contains('open')) {
      // Swipe back -> engedj√ºk visszacs√∫szni
      contentWrapper.style.transform = `translateX(${Math.min(currentX - 80, 0)}px)`;
    } else {
      contentWrapper.style.transform = 'translateX(0)';
    }
  };

  const onDragEnd = () => {
    if (!isDragging) return;
    isDragging = false;

    document.removeEventListener('mousemove', onDragMove);
    document.removeEventListener('mouseup', onDragEnd);
    document.removeEventListener('touchmove', onDragMove);
    document.removeEventListener('touchend', onDragEnd);

    contentWrapper.style.transition = 'transform 0.3s ease';

    if (crossedThreshold) {
      contentWrapper.style.transform = 'translateX(-80px)';
      listItem.classList.add('open');
      currentlyOpenListItem = listItem;
    } else if (listItem.classList.contains('open') && currentX > 40) {
      // Swipe back bez√°r√°s
      contentWrapper.style.transform = 'translateX(0)';
      listItem.classList.remove('open');
      currentlyOpenListItem = null;
    } else {
      // Alap helyre√°ll√≠t√°s
      if (listItem.classList.contains('open')) {
        contentWrapper.style.transform = 'translateX(-80px)';
      } else {
        contentWrapper.style.transform = 'translateX(0)';
      }
    }
    if (crossedThreshold || (listItem.classList.contains('open') && currentX > 40)) {
      wasJustDragging = true;
      setTimeout(() => {
        wasJustDragging = false;
      }, 200); // n√∂velj√ºk a tilt√°st 200ms-ra a biztons√°g kedv√©√©rt
    }
  };

  contentWrapper.addEventListener('mousedown', onDragStart);
  contentWrapper.addEventListener('touchstart', onDragStart, { passive: true });

  // Kuka ikon
  const deleteBtn = document.createElement('div');
  deleteBtn.className = 'delete-btn';
  deleteBtn.innerHTML = '<i class="fas fa-trash"></i>';
  deleteBtn.addEventListener('click', () => {
    listItem.classList.add('item-deleted');
    handleDeleteItem(itemName);
    setTimeout(() => {
      if (listItem.parentNode) listItem.parentNode.removeChild(listItem);
      if (currentlyOpenListItem === listItem) currentlyOpenListItem = null;
    }, 300);
  });
  listItem.appendChild(deleteBtn);
}

async function handleDeleteItem(item) {
  try {
    console.log(`ÔøΩÔ∏è [DELETE] Elem t√∂rl√©se megkezdve: "${item}"`);

    // Lok√°lis t√∂rl√©s
    if (votes[item]) {
      delete votes[item];
      console.log(`üßπ [DELETE] Lok√°lis vote t√∂r√∂lve: "${item}"`);
    }
    accepted = accepted.filter(i => i !== item);
    decidedItems.delete(item);
    userAddedItems.delete(item); // User added items-b√≥l is t√∂r√∂lj√ºk
    
    console.log(`üìù [DELETE] Lok√°lis adatok friss√≠tve - elfogadottak: [${accepted.join(', ')}]`);

    // ELS≈ê: Firestore topics-b√≥l t√∂rl√©s - EZ TRIGGERELI A TOPIC LISTENER-T MINDENKINEK!
    await db.collection("topics").doc(currentTopic).update({
      items: firebase.firestore.FieldValue.arrayRemove(item)
    });
    console.log(`üî• [DELETE] Firestore topics friss√≠tve - realtime listener aktiv√°lva`);

    // M√ÅSODIK: Swipes friss√≠t√©se - ezzel minden user-n√©l friss√ºl a vote lista
    await sendSwipes();

    // Lok√°lis topics objektum friss√≠t√©se is
    if (topics[currentTopic]) {
      topics[currentTopic] = topics[currentTopic].filter(i => i !== item);
      console.log(`üîÑ [DELETE] Lok√°lis topics objektum friss√≠tve`);
    }

    console.log(`‚úÖ [DELETE] "${item}" sikeresen t√∂r√∂lve mindenhonnan - realtime sync aktiv√°lva`);
  } catch (error) {
    console.error(`‚ùå [DELETE] Hiba az elem t√∂rl√©sekor: "${item}"`, error);
  }
}

// --- Igen/Nem v√°lt√°s ---
function addVoteToggleListener(el, item, currentlyVotedYes) {
  el.addEventListener('click', () => {
    if (wasJustDragging) {
      console.log(`üö´ [VOTE] Kattint√°s blokkolva - √©pp drag t√∂rt√©nt`);
      return;
    }
    
    // Jelenlegi szavazat √°llapota
    const wasYes = currentlyVotedYes;
    const newVote = wasYes ? "no" : "yes";
    
    console.log(`üîÑ [VOTE] Szavazat v√°lt√°sa - "${item}": ${wasYes ? 'IGEN' : 'NEM'} ‚Üí ${newVote === 'yes' ? 'IGEN' : 'NEM'}`);
    
    // Friss√≠tj√ºk a votes objektumot
    votes[item] = newVote;
    
    // Friss√≠tj√ºk az accepted list√°t
    if (newVote === "yes" && !accepted.includes(item)) {
      accepted.push(item);
      console.log(`‚úÖ [VOTE] "${item}" hozz√°adva az elfogadottakhoz`);
    } else if (newVote === "no") {
      accepted = accepted.filter(i => i !== item);
      console.log(`‚ùå [VOTE] "${item}" elt√°vol√≠tva az elfogadottakb√≥l`);
    }
    
    // K√ºld√©s a szervernek
    sendSwipes();
  });
}

// --- Match ellen≈ërz√©s (√ºres f√ºggv√©ny, a listener automatikusan friss√≠t) ---
function checkMatch() {
  console.log(`üîç [MATCH] Match ellen≈ërz√©s h√≠vva - a realtime listener automatikusan friss√≠ti az eredm√©nyeket`);
}

// --- User szavazatok bet√∂lt√©se a szerverr≈ël ---
async function loadUserVotes() {
  try {
    console.log(`üì• [VOTES] Kor√°bbi szavazatok bet√∂lt√©se - userId: ${userId}`);
    
    const swipeDoc = await db.collection("swipes").doc(`${sessionId}_${userId}`).get();
    
    if (swipeDoc.exists) {
      const data = swipeDoc.data();
      votes = data.swipes || {};
      
      // Accepted lista √∫jra√©p√≠t√©se a votes alapj√°n
      accepted = [];
      Object.entries(votes).forEach(([item, vote]) => {
        if (vote === "yes") {
          accepted.push(item);
        }
      });
      
      console.log(`‚úÖ [VOTES] Szavazatok bet√∂ltve - ${Object.keys(votes).length} elem, elfogadva: [${accepted.join(', ')}]`);
    } else {
      console.log(`üì≠ [VOTES] Nincsenek kor√°bbi szavazatok`);
      votes = {};
      accepted = [];
    }
  } catch (error) {
    console.error(`‚ùå [VOTES] Hiba a szavazatok bet√∂lt√©sekor`, error);
    votes = {};
    accepted = [];
  }
}

// --- Ellen≈ërzi, hogy a user befejezte-e a szavaz√°st ---
function hasUserFinishedVoting() {
  const allItems = topics[currentTopic] || [];
  const votedItems = Object.keys(votes);
  
  console.log(`üîç [CHECK] Szavaz√°s √°llapot - √∂sszes elem: ${allItems.length}, megszavazott: ${votedItems.length}`);
  
  // Ha minden elemre szavaztunk, akkor k√©sz vagyunk
  const isFinished = allItems.length > 0 && allItems.every(item => votes.hasOwnProperty(item));
  
  if (isFinished) {
    console.log(`‚úÖ [CHECK] User befejezte a szavaz√°st`);
  } else {
    console.log(`üéØ [CHECK] User m√©g nem fejezte be - hi√°nyz√≥ elemek: [${allItems.filter(item => !votes.hasOwnProperty(item)).join(', ')}]`);
  }
  
  return isFinished;
}

// --- √öj elem hozz√°ad√°sa ---
async function handleAddItem() {
  try {
    const input = document.getElementById('newItemInput');
    const item = input.value.trim();
    if (!item) {
      console.log(`‚ö†Ô∏è [ADD] √úres elem, hozz√°ad√°s megszak√≠tva`);
      return;
    }
    
    console.log(`‚ûï [ADD] √öj elem hozz√°ad√°sa: "${item}" a "${currentTopic}" t√©m√°hoz`);
    
    // R√∂gz√≠tj√ºk, hogy ez a user adta hozz√° - ne kapjon r√≥la modal-t
    userAddedItems.add(item);
    console.log(`üìù [ADD] Elem r√∂gz√≠tve saj√°t hozz√°ad√°sk√©nt: "${item}"`);
    
    if (!topics[currentTopic]) topics[currentTopic] = [];
    topics[currentTopic].push(item);
    
    await db.collection("topics").doc(currentTopic).update({ 
      items: topics[currentTopic] 
    });
    
    console.log(`üìù [ADD] "${item}" hozz√°adva a Firestore topics-hoz`);
    
    // AUTOMATIKUS IGEN szavazat a hozz√°ad√≥nak (aki hozz√°adta, annak tetszik)
    votes[item] = "yes";
    if (!accepted.includes(item)) {
      accepted.push(item);
      console.log(`‚úÖ [ADD] "${item}" automatikusan elfogadva a hozz√°ad√≥ √°ltal`);
    }
    
    // Hozz√°ad√≥ ne kapjon modal-t - m√°r d√∂nt√∂tt
    decidedItems.add(item);
    console.log(`üö´ [ADD] "${item}" hozz√°adva a decided items-hez - nincs modal a hozz√°ad√≥nak`);
    
    await sendSwipes();
    input.value = '';
    input.dispatchEvent(new Event('input'));
    
    console.log(`‚úÖ [ADD] √öj elem sikeresen hozz√°adva √©s szavazat elk√ºldve`);
  } catch (error) {
    console.error(`‚ùå [ADD] Hiba az √∫j elem hozz√°ad√°sakor`, error);
  }
}

// --- QR ---
addInstantClick(document.getElementById("shareQrBtn"), () => {
  const link = window.location.href;
  document.getElementById("qrLinkText").textContent = link;
  const qrContainer = document.getElementById("qrCodeContainer");
  qrContainer.innerHTML = "";
  new QRCode(qrContainer, { text: link, width: 180, height: 180 });
  new bootstrap.Modal(document.getElementById("qrModal")).show();
});

// --- Oldal bet√∂lt√©s ---
window.onload = () => {
  console.log(`üöÄ [INIT] Alkalmaz√°s ind√≠t√°sa...`);
  
  userId = localStorage.getItem("swipy_user_id") || generateUserId();
  localStorage.setItem("swipy_user_id", userId);
  sessionId = "global";
  
  console.log(`üë§ [INIT] User ID: ${userId}, Session ID: ${sessionId}`);
  
  // --- Rejtett admin funkci√≥ aktiv√°l√°sa ---
  const resultsTitle = document.querySelector("#screen-match h2");
  if (resultsTitle) {
    resultsTitle.addEventListener("click", handleSecretClick);
    console.log(`ü§´ [SECRET] Admin listener telep√≠tve az Eredm√©nyek c√≠mre`);
  } else {
    console.log(`‚ùå [SECRET] Eredm√©nyek c√≠m nem tal√°lhat√≥!`);
  }
  
  // Automatikus join ha van sessionId a URL-ben
  const urlSessionId = getSessionIdFromURL();
  console.log(`üîó [INIT] URL session ID ellen≈ërz√©s:`, urlSessionId ? urlSessionId : "nincs");
  
  if (urlSessionId) {
    sessionId = urlSessionId;
    joinSession(urlSessionId);
  }
  
  loadTopics();
  checkSessionStatus();
  addInstantClick(document.getElementById("topicNextBtn"), onTopicNext);
  addInstantClick(document.getElementById("yesBtn"), () => handleSwipe(true));
  addInstantClick(document.getElementById("noBtn"), () => handleSwipe(false));
  addInstantClick(document.getElementById("addItemBtn"), handleAddItem);
  
  // √öj elem input mez≈ë figyel√©se - gomb enged√©lyez√©s/tilt√°s
  const newItemInput = document.getElementById('newItemInput');
  const addItemBtn = document.getElementById('addItemBtn');
  
  function updateAddButtonState() {
    const hasText = newItemInput.value.trim().length > 0;
    addItemBtn.disabled = !hasText;
    
    // Vizu√°lis √°llapot friss√≠t√©se
    if (hasText) {
      addItemBtn.className = 'btn btn-primary';
      addItemBtn.innerHTML = '<i class="fas fa-plus me-1"></i>Hozz√°ad√°s';
    } else {
      addItemBtn.className = 'btn btn-secondary';
      addItemBtn.innerHTML = '<i class="fas fa-plus me-1"></i>Hozz√°ad√°s';
    }
    
    console.log(`üéõÔ∏è [INPUT] Hozz√°ad√°s gomb √°llapot: ${hasText ? 'enged√©lyezve (k√©k)' : 'tiltva (sz√ºrke)'} - sz√∂veg: "${newItemInput.value.trim()}"`);
  }
  
  // Kezdeti √°llapot be√°ll√≠t√°sa
  updateAddButtonState();
  
  // Input esem√©ny figyel√©se
  newItemInput.addEventListener('input', updateAddButtonState);
  
  // Pending vote modal gombok
  addInstantClick(document.getElementById("pendingVoteYes"), () => {
    const item = document.getElementById('pendingItemText').textContent;
    console.log(`‚úÖ [MODAL] √öj elem elfogadva: "${item}"`);
    votes[item] = "yes";
    if (!accepted.includes(item)) accepted.push(item);
    sendSwipes();
    bootstrap.Modal.getInstance(document.getElementById('pendingVoteModal')).hide();
  });
  
  addInstantClick(document.getElementById("pendingVoteNo"), () => {
    const item = document.getElementById('pendingItemText').textContent;
    console.log(`‚ùå [MODAL] √öj elem elutas√≠tva: "${item}"`);
    votes[item] = "no";
    accepted = accepted.filter(i => i !== item);
    sendSwipes();
    bootstrap.Modal.getInstance(document.getElementById('pendingVoteModal')).hide();
  });
  
  console.log(`‚úÖ [INIT] Alkalmaz√°s sikeresen inicializ√°lva`);
};

// --- Oldal elhagy√°s figyel√©s ---
window.addEventListener('beforeunload', () => {
  console.log(`üö™ [EVENT] beforeunload event - user kil√©p√©s`);
  leaveSession();
});

// Tov√°bbi kil√©p√©s esem√©nyek figyel√©se
window.addEventListener('pagehide', () => {
  console.log(`üö™ [EVENT] pagehide event - user kil√©p√©s`);
  leaveSession();
});

// Visibility API - ha a tab inakt√≠v lesz HOSSZ√ö IDEIG
let visibilityTimer = null;
document.addEventListener('visibilitychange', () => {
  if (document.visibilityState === 'hidden') {
    // Tab elrejtve - v√°runk 2 percet, h√°tha visszaj√∂n
    console.log(`üëÅÔ∏è [EVENT] Tab elrejtve, 2 perces timer ind√≠t√°sa`);
    visibilityTimer = setTimeout(() => {
      console.log(`‚è∞ [EVENT] Tab 2 perce inakt√≠v, kil√©p√©s v√©grehajt√°sa`);
      leaveSession();
    }, 2 * 60 * 1000); // 2 perc
  } else if (document.visibilityState === 'visible') {
    // Tab ism√©t akt√≠v - t√∂r√∂lj√ºk a timert √©s √∫jra csatlakozunk
    console.log(`üëÅÔ∏è [EVENT] Tab ism√©t l√°that√≥`);
    if (visibilityTimer) {
      clearTimeout(visibilityTimer);
      visibilityTimer = null;
      console.log(`‚è∞ [EVENT] Timer t√∂r√∂lve`);
    }
    // Ha van akt√≠v topic, √∫jra csatlakozunk
    if (currentTopic && sessionId) {
      console.log(`üîÑ [EVENT] √öjracsatlakoz√°s sessionhez`);
      joinSession();
    }
  }
});




