// T√©m√°k kezel√©se √©s bet√∂lt√©se modul

// T√©m√°k bet√∂lt√©se
async function loadTopics() {
  try {
    console.log(`üìö [TOPICS] T√©m√°k bet√∂lt√©se kezd≈ëdik...`);
    
    const snapshot = await db.collection("topics").get();
    window.topics = {};
    
    snapshot.forEach(doc => {
      const data = doc.data();
      const items = data.items || [];
      const subtopics = data.subtopics || {};
      
      // FRISS√çTVE: subtopicokat is t√°roljuk
      window.topics[doc.id] = {
        items: items,
        subtopics: subtopics
      };
      
      console.log(`üìñ [TOPICS] "${doc.id}" bet√∂ltve - ${items.length} elem, ${Object.keys(subtopics).length} subtopic csoport`);
    });
    
    const topicSelect = document.getElementById("topic");
    topicSelect.innerHTML = "";
    
    Object.keys(window.topics).forEach(topic => {
      const opt = document.createElement("option");
      opt.value = topic;
      opt.innerText = topic;
      topicSelect.appendChild(opt);
    });
    
    console.log(`‚úÖ [TOPICS] ${Object.keys(window.topics).length} t√©ma sikeresen bet√∂ltve: [${Object.keys(window.topics).join(', ')}]`);
  } catch (error) {
    console.error(`‚ùå [TOPICS] Hiba a t√©m√°k bet√∂lt√©sekor`, error);
  }
}

// T√©ma v√°laszt√°s
async function onTopicNext() {
  try {
    const topicSelect = document.getElementById("topic");
    window.currentTopic = topicSelect.value;
    if (!window.currentTopic) { 
      console.log(`‚ö†Ô∏è [TOPIC] Nincs t√©ma kiv√°lasztva`);
      alert("V√°lassz t√©m√°t!"); 
      return; 
    }

    console.log(`üéØ [TOPIC] √öj session l√©trehoz√°sa - topic: ${window.currentTopic}, userId: ${window.userId}`);

    // Session l√©trehoz√°sa
    await db.collection("session").doc(window.sessionId).set({
      topic: window.currentTopic,
      last_updated: firebase.firestore.FieldValue.serverTimestamp(),
      active_users: {
        [window.userId]: firebase.firestore.FieldValue.serverTimestamp()
      }
    });

    console.log(`‚úÖ [TOPIC] Session sikeresen l√©trehozva - sessionId: ${window.sessionId}, topic: ${window.currentTopic}`);
    
    // Adatb√°zis dump session l√©trehoz√°s ut√°n
    setTimeout(() => window.dbDump(), 500);

    // √öj session eset√©n t√∂rlj√ºk a kor√°bbi szavazatokat
    window.votes = {};
    window.accepted = [];
    window.decidedItems.clear();
    window.userAddedItems.clear(); // Saj√°t hozz√°adott elemek is t√∂rl≈ëdnek

    startTopic(window.currentTopic);
    window.utils.showScreen("screen-swipe");
  } catch (error) {
    console.error(`‚ùå [TOPIC] Hiba a session l√©trehoz√°sban`, error);
    alert("Hiba t√∂rt√©nt a session l√©trehoz√°sakor!");
  }
}

// T√©ma listener
function startTopicListener(topic) {
  if (window.unsubscribeTopicListener) window.unsubscribeTopicListener();

  const topicDocRef = db.collection("topics").doc(topic);
  window.unsubscribeTopicListener = topicDocRef.onSnapshot(doc => {
    if (!doc.exists) return;
    const docData = doc.data();
    const newItems = docData.items || [];
    const newSubtopics = docData.subtopics || {};
    // FRISS√çTVE: topics objektum √∫j strukt√∫r√°ja miatt .items kell
    const oldItems = window.topics[topic]?.items || [];
    const oldSubtopics = window.topics[topic]?.subtopics || {};
    
    console.log(`üîÑ [TOPIC-LISTENER] V√°ltoz√°sok detekt√°lva - "${topic}"`);
    console.log(`üìã [TOPIC-LISTENER] R√©gi items: [${oldItems.join(', ')}]`);
    console.log(`üìã [TOPIC-LISTENER] √öj items: [${newItems.join(', ')}]`);
    console.log(`üéØ [TOPIC-LISTENER] R√©gi subtopics:`, oldSubtopics);
    console.log(`üéØ [TOPIC-LISTENER] √öj subtopics:`, newSubtopics);
    
    // T√∂r√∂lt elemek detekt√°l√°sa
    const deletedItems = oldItems.filter(item => !newItems.includes(item));
    if (deletedItems.length > 0) {
      console.log(`üóëÔ∏è [TOPIC] T√∂r√∂lt elemek detekt√°lva: [${deletedItems.join(', ')}]`);
      
      // T√∂r√∂lt elemek elt√°vol√≠t√°sa a lok√°lis adatokb√≥l
      deletedItems.forEach(item => {
        if (window.votes[item]) {
          delete window.votes[item];
          console.log(`üßπ [TOPIC] T√∂r√∂lt elem szavazata elt√°vol√≠tva: "${item}"`);
        }
        window.accepted = window.accepted.filter(i => i !== item);
        window.decidedItems.delete(item);
      });
      
      // Ha match screen-en vagyunk, friss√≠ts√ºk a list√°t
      if (document.getElementById('screen-match').classList.contains('active-screen')) {
        console.log(`üîÑ [TOPIC] Match lista friss√≠t√©se t√∂rl√©s ut√°n`);
        // A match listener automatikusan friss√≠ti a list√°t
      }
    }
    
    // FRISS√çTVE: teljes topic objektum friss√≠t√©se
    const prevTopics = JSON.stringify(window.topics[topic]);
    window.topics[topic] = {
      items: newItems,
      subtopics: newSubtopics
    };
    const newTopics = JSON.stringify(window.topics[topic]);
    
    if (prevTopics !== newTopics) {
      console.log(`‚úÖ [TOPIC-LISTENER] Topics objektum friss√≠tve: "${topic}"`);
    }

    newItems.forEach(item => {
      // Csak akkor mutassunk modal-t, ha a MATCH screen-en vagyunk √©s √∫j elem √©rkezett
      // √âS a user nem ≈ë maga adta hozz√°
      if (!window.decidedItems.has(item) && !window.votes.hasOwnProperty(item) && !window.userAddedItems.has(item)) {
        window.decidedItems.add(item);
        
        // Modal csak match screen-en
        if (document.getElementById('screen-match').classList.contains('active-screen')) {
          window.utils.showNewItemModal(item);
          console.log(`üÜï [TOPIC] √öj elem √©rkezett match screen-en: "${item}"`);
        } else {
          console.log(`üÜï [TOPIC] √öj elem √©rkezett swipe k√∂zben: "${item}" - modal elhalasztva`);
        }
      } else if (window.userAddedItems.has(item)) {
        console.log(`üö´ [TOPIC] Saj√°t hozz√°adott elem: "${item}" - modal kihagyva`);
        window.decidedItems.add(item); // Biztos√≠tsuk, hogy decided legyen
      }
    });

    // Ha √∫j elemek √©rkeztek √©s √©pp a swipe screen-en vagyunk, friss√≠ts√ºk a currentItems list√°t
    if (document.getElementById('screen-swipe').classList.contains('active-screen')) {
      const oldLength = window.currentItems.length;
      window.currentItems = [...newItems];
      
      if (newItems.length > oldLength) {
        console.log(`üìà [TOPIC] ${newItems.length - oldLength} √∫j elem hozz√°adva a list√°hoz`);
      }
    }
  });
}

// T√©ma ind√≠t√°sa
function startTopic(topic) {
  console.log(`üèÅ [SWIPE] T√©ma ind√≠t√°sa - topic: ${topic}, userId: ${window.userId}`);
  
  window.currentTopic = topic;
  // M√ìDOS√çTVA: el≈ësz√∂r csak a f≈ët√©m√°kat t√∂ltj√ºk be
  const mainTopics = window.topics[topic]?.items || [];
  window.currentItems = [...mainTopics];
  window.utils.shuffle(window.currentItems);
  
  // KIEG√âSZ√çTVE: ha m√°r voltak szavazatok, rekonstru√°ljuk a teljes list√°t
  const alreadyAcceptedMainTopics = mainTopics.filter(item => window.votes[item] === "yes");
  console.log(`üîÑ [SWIPE] Elfogadott f≈ët√©m√°k √∫jrat√∂lt√©sn√©l: [${alreadyAcceptedMainTopics.join(', ')}]`);
  
  // Besz√∫rjuk az elfogadott f≈ët√©m√°k subtopicjait
  alreadyAcceptedMainTopics.forEach(mainTopic => {
    const subtopics = window.subtopicManager.getSubtopicsForItem(mainTopic);
    if (subtopics.length > 0) {
      console.log(`üîÄ [SWIPE] "${mainTopic}" subtopicjainak besz√∫r√°sa: [${subtopics.join(', ')}]`);
      
      // Megkeress√ºk a f≈ët√©ma poz√≠ci√≥j√°t a list√°ban
      const mainTopicIndex = window.currentItems.indexOf(mainTopic);
      if (mainTopicIndex !== -1) {
        // Besz√∫rjuk a subtopicokat a f≈ët√©ma ut√°n
        window.currentItems.splice(mainTopicIndex + 1, 0, ...subtopics);
      }
    }
  });
  
  // Keress√ºk meg, hogy hol tartunk a szavaz√°sban
  window.currentIndex = 0;
  for (let i = 0; i < window.currentItems.length; i++) {
    if (!window.votes.hasOwnProperty(window.currentItems[i])) {
      window.currentIndex = i;
      break;
    }
  }
  
  // Ha minden elemre szavaztunk, akkor a v√©g√©re √°ll√≠tjuk
  if (window.currentIndex === 0 && window.currentItems.length > 0 && window.votes.hasOwnProperty(window.currentItems[0])) {
    window.currentIndex = window.currentItems.length;
  }
  
  // decidedItems √∫jra√©p√≠t√©se - MINDEN l√©tez≈ë elemet hozz√°adunk
  window.decidedItems.clear();
  // Csak a f≈ët√©m√°kat adjuk hozz√° decided-hez - a subtopicok dinamikusan ker√ºlnek be
  mainTopics.forEach(item => {
    window.decidedItems.add(item);
  });
  
  console.log(`üîÄ [SWIPE] ${window.currentItems.length} elem (f≈ët√©m√°k + subtopicok) - jelenlegi poz√≠ci√≥: ${window.currentIndex}/${window.currentItems.length}`);
  console.log(`üìä [SWIPE] Kor√°bbi szavazatok: ${Object.keys(window.votes).length}, elfogadva: [${window.accepted.join(', ')}]`);
  console.log(`üéØ [SWIPE] Decided f≈ët√©m√°k: [${[...window.decidedItems].join(', ')}]`);
  console.log(`üìã [SWIPE] Aktu√°lis lista: [${window.currentItems.join(', ')}]`);
  
  document.querySelector('#screen-swipe h2').textContent = window.currentTopic;
  window.swipeModule.showNextItem();

  startTopicListener(topic);
  window.matchModule.startMatchListener();
}

// Export
window.topicsModule = {
  loadTopics,
  onTopicNext,
  startTopicListener,
  startTopic
};
