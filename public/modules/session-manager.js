// Session kezel√©s modul

// Egyszer≈± session kezel√©s (heartbeat n√©lk√ºl)
async function joinSession() {
  try {
    // User hozz√°ad√°sa a session-hoz
    await db.collection("session").doc(window.sessionId).update({
      [`active_users.${window.userId}`]: firebase.firestore.FieldValue.serverTimestamp()
    });
    console.log(`üöÄ [SESSION] User csatlakozott - userId: ${window.userId}, sessionId: ${window.sessionId}`);
  } catch (error) {
    console.error(`‚ùå [SESSION] Hiba a csatlakoz√°sn√°l - userId: ${window.userId}`, error);
  }
}

async function leaveSession() {
  try {
    console.log(`üö™ [SESSION] User kil√©p√©si k√≠s√©rlet - userId: ${window.userId}, sessionId: ${window.sessionId}`);
    
    // User elt√°vol√≠t√°sa a session-b√≥l
    await db.collection("session").doc(window.sessionId).update({
      [`active_users.${window.userId}`]: firebase.firestore.FieldValue.delete()
    });
    console.log(`‚úÖ [SESSION] User sikeresen kil√©pett - userId: ${window.userId}`);
    
    // Ellen≈ërizz√ºk, hogy maradt-e m√©g valaki
    await checkIfSessionEmpty();
  } catch (error) {
    console.log(`‚ö†Ô∏è [SESSION] Session m√°r nem l√©tezik vagy hiba t√∂rt√©nt - ${error.message}`);
  }
}

async function checkIfSessionEmpty() {
  try {
    const sessionDoc = await db.collection("session").doc(window.sessionId).get();
    if (!sessionDoc.exists) {
      console.log(`üì≠ [SESSION] Session m√°r nem l√©tezik - sessionId: ${window.sessionId}`);
      return;
    }
    
    const data = sessionDoc.data();
    const activeUsers = data.active_users || {};
    const userCount = Object.keys(activeUsers).length;
    
    console.log(`üë• [SESSION] Akt√≠v userek sz√°ma: ${userCount}, users: [${Object.keys(activeUsers).join(', ')}]`);
    
    // Ha nincs akt√≠v user, t√∂r√∂lj√ºk a sessiont
    if (userCount === 0) {
      console.log(`üóëÔ∏è [SESSION] Session √ºres, t√∂rl√©s megkezd√©se - sessionId: ${window.sessionId}`);
      await deleteSession();
    }
  } catch (error) {
    console.error(`‚ùå [SESSION] Hiba az √ºres session ellen≈ërz√©sben`, error);
  }
}

async function deleteSession() {
  try {
    console.log(`üóëÔ∏è [SESSION] Session t√∂rl√©se megkezdve - sessionId: ${window.sessionId}`);
    
    // Session t√∂rl√©se
    await db.collection("session").doc(window.sessionId).delete();
    console.log(`‚úÖ [SESSION] Session dokumentum t√∂r√∂lve - sessionId: ${window.sessionId}`);
    
    // Kapcsol√≥d√≥ swipe-ok t√∂rl√©se
    const swipesSnapshot = await db.collection("swipes")
      .where("session", "==", window.sessionId)
      .get();
      
    console.log(`üßπ [SESSION] ${swipesSnapshot.size} db swipe dokumentum t√∂rl√©se...`);
    
    const batch = db.batch();
    swipesSnapshot.forEach(doc => {
      batch.delete(doc.ref);
    });
    await batch.commit();
    
    console.log(`‚úÖ [SESSION] Session √©s ${swipesSnapshot.size} db swipe t√∂r√∂lve - sessionId: ${window.sessionId}`);
  } catch (error) {
    console.error(`‚ùå [SESSION] Hiba a session t√∂rl√©sekor`, error);
  }
}

// Session st√°tusz ellen≈ërz√©s
async function checkSessionStatus() {
  try {
    console.log(`üîç [INIT] Session st√°tusz ellen≈ërz√©se - sessionId: ${window.sessionId}, userId: ${window.userId}`);
    
    const doc = await db.collection("session").doc(window.sessionId).get();
    if (doc.exists && doc.data().topic) {
      // Van akt√≠v session -> csatlakozunk
      window.currentTopic = doc.data().topic;
      const activeUsers = Object.keys(doc.data().active_users || {});
      
      console.log(`üìã [INIT] Akt√≠v session tal√°lva - topic: ${window.currentTopic}, activeUsers: [${activeUsers.join(', ')}]`);
      
      await joinSession(); // Jelezz√ºk, hogy csatlakoztunk
      
      // Bet√∂ltj√ºk a kor√°bbi szavazatainkat a szerverr≈ël
      await window.votesModule.loadUserVotes();
      
      window.topicsModule.startTopic(window.currentTopic);
      
      // Eld√∂ntj√ºk, hogy swipe vagy match k√©perny≈ëre ker√ºlj√ºnk
      if (window.votesModule.hasUserFinishedVoting()) {
        console.log(`‚úÖ [INIT] User m√°r befejezte a szavaz√°st, match k√©perny≈ë`);
        window.utils.showScreen("screen-match");
      } else {
        console.log(`üéØ [INIT] User folytatja a szavaz√°st`);
        window.utils.showScreen("screen-swipe");
      }
    } else {
      // Nincs akt√≠v session -> els≈ë vagyunk, topic v√°laszt√°s
      console.log(`üéØ [INIT] Nincs akt√≠v session, topic v√°laszt√°s mutat√°sa`);
      window.utils.showScreen("screen-topic");
    }
  } catch (error) {
    console.error(`‚ùå [INIT] Hiba a session st√°tusz ellen≈ërz√©sben`, error);
    window.utils.showScreen("screen-topic");
  }
}

// Export
window.sessionManager = {
  joinSession,
  leaveSession,
  checkIfSessionEmpty,
  deleteSession,
  checkSessionStatus
};
