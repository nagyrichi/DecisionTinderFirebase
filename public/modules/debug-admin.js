// Debug √©s admin funkci√≥kat tartalmaz√≥ modul

// Debug funkci√≥: teljes adatb√°zis tartalom ki√≠r√°sa
async function logDatabaseContents() {
  try {
    const [sessionsSnap, swipesSnap, topicsSnap] = await Promise.all([
      db.collection("session").get(),
      db.collection("swipes").get(),
      db.collection("topics").get()
    ]);
    
    console.log(`üìä [DB] ========== TELJES ADATB√ÅZIS DUMP ==========`);
    console.log(`   üìÇ Sessions: ${sessionsSnap.size} db`);
    console.log(`   üìÇ Swipes: ${swipesSnap.size} db`);
    console.log(`   üìÇ Topics: ${topicsSnap.size} db`);
    console.log(`================================================`);
    
    // Sessions r√©szletes ki√≠r√°sa
    console.log(`üóÇÔ∏è [SESSIONS] R√©szletes tartalom:`);
    if (sessionsSnap.size === 0) {
      console.log(`   (nincs session)`);
    } else {
      sessionsSnap.forEach(doc => {
        const data = doc.data();
        console.log(`   üìã Session ID: ${doc.id}`);
        console.log(`      ‚îú‚îÄ topic: "${data.topic}"`);
        console.log(`      ‚îú‚îÄ users: [${data.users ? data.users.join(', ') : 'nincs'}]`);
        console.log(`      ‚îú‚îÄ createdAt: ${data.createdAt ? new Date(data.createdAt.toDate()).toLocaleString() : 'nincs'}`);
        console.log(`      ‚îî‚îÄ lastActivity: ${data.lastActivity ? new Date(data.lastActivity.toDate()).toLocaleString() : 'nincs'}`);
      });
    }
    
    // Swipes r√©szletes ki√≠r√°sa
    console.log(`üéØ [SWIPES] R√©szletes tartalom:`);
    if (swipesSnap.size === 0) {
      console.log(`   (nincs swipe)`);
    } else {
      swipesSnap.forEach(doc => {
        const data = doc.data();
        console.log(`   üëÜ Swipe ID: ${doc.id}`);
        console.log(`      ‚îú‚îÄ sessionId: ${data.sessionId}`);
        console.log(`      ‚îú‚îÄ userId: ${data.userId}`);
        console.log(`      ‚îú‚îÄ item: "${data.item}"`);
        console.log(`      ‚îú‚îÄ vote: ${data.vote}`);
        console.log(`      ‚îî‚îÄ timestamp: ${data.timestamp ? new Date(data.timestamp.toDate()).toLocaleString() : 'nincs'}`);
      });
    }
    
    // Topics r√©szletes ki√≠r√°sa
    console.log(`üìñ [TOPICS] R√©szletes tartalom:`);
    if (topicsSnap.size === 0) {
      console.log(`   (nincs topic)`);
    } else {
      topicsSnap.forEach(doc => {
        const data = doc.data();
        const items = data.items || [];
        console.log(`   üìö Topic ID: ${doc.id}`);
        console.log(`      ‚îú‚îÄ elemek sz√°ma: ${items.length}`);
        console.log(`      ‚îî‚îÄ elemek: [${items.join(', ')}]`);
      });
    }
    
    console.log(`================================================`);
    console.log(`‚úÖ [DB] Adatb√°zis dump befejezve`);
  } catch (error) {
    console.log(`‚ö†Ô∏è [DB] Nem siker√ºlt bet√∂lteni az adatb√°zis tartalmat:`, error.message);
  }
}

// Rejtett admin funkci√≥ (5x gyors kattint√°s az "Eredm√©nyek" c√≠mre)
async function secretAdminCleanup() {
  try {
    console.log(`üî• [SECRET] ADMIN CLEANUP MEGKEZD√âSE - MINDEN ADAT T√ñRL√âSE`);
    
    // 1. Minden session t√∂rl√©se
    const sessionsSnapshot = await db.collection("session").get();
    console.log(`üóëÔ∏è [SECRET] ${sessionsSnapshot.size} db session t√∂rl√©se...`);
    
    const sessionBatch = db.batch();
    sessionsSnapshot.forEach(doc => {
      sessionBatch.delete(doc.ref);
    });
    await sessionBatch.commit();
    
    // 2. Minden swipe t√∂rl√©se
    const swipesSnapshot = await db.collection("swipes").get();
    console.log(`üóëÔ∏è [SECRET] ${swipesSnapshot.size} db swipe t√∂rl√©se...`);
    
    const swipesBatch = db.batch();
    swipesSnapshot.forEach(doc => {
      swipesBatch.delete(doc.ref);
    });
    await swipesBatch.commit();
    
    // 3. Lok√°lis adatok t√∂rl√©se
    localStorage.removeItem("swipy_user_id");
    
    console.log(`‚úÖ [SECRET] TELJES CLEANUP BEFEJEZVE - ${sessionsSnapshot.size} session, ${swipesSnapshot.size} swipe t√∂r√∂lve`);
    
    // Visszajelz√©s a usernek
    alert(`üî• ADMIN CLEANUP K√âSZ!\n\nT√∂r√∂lve:\n- ${sessionsSnapshot.size} session\n- ${swipesSnapshot.size} swipe\n- localStorage adatok\n\nOldal √∫jrat√∂lt√©se...`);
    
    // Oldal √∫jrat√∂lt√©se
    window.location.reload();
    
  } catch (error) {
    console.error(`‚ùå [SECRET] Hiba az admin cleanup-ban`, error);
    alert(`‚ùå Hiba t√∂rt√©nt: ${error.message}`);
  }
}

// EGYSZERI DB INICIALIZ√ÅL√ì FUNKCI√ì (CSAK FEJLESZT√âSHEZ!)
async function initializeTopicsWithSubtopics() {
  try {
    console.log(`üîß [INIT-DB] ADATB√ÅZIS INICIALIZ√ÅL√ÅS MEGKEZD√âSE`);
    
    // Teljes t√©m√°k adatstrukt√∫ra subtopicokkal - EREDETI T√âM√ÅK EMOJIKKAL
    const topicsWithSubtopics = {
      "üçΩÔ∏è Mit egy√ºnk?": {
        items: [
          "üçï Pizza",
          "üç£ Sushi", 
          "üçî Hamburger",
          "üçú Pho leves",
          "üçù T√©szta",
          "ü•ô Gyros",
          "üç≤ Ramen"
        ],
        subtopics: {
          "üçï Pizza": ["Margherita", "Hawaii", "Pepperoni", "Quattro Stagioni"],
          "üç£ Sushi": ["Maki", "Nigiri", "Sashimi", "Temaki"],
          "üçî Hamburger": ["KFC", "Burger King", "McDonald's", "Subway"],
          "üçú Pho leves": ["Marhah√∫sos", "Csirkeh√∫sos", "Veg√°n", "Garn√©l√°s"],
          "üçù T√©szta": ["Carbonara", "Pesto", "Bolognese", "Amatriciana"],
          "ü•ô Gyros": ["Csirke", "Marha", "Veg√°n", "Kevert"],
          "üç≤ Ramen": ["Tonkotsu", "Shoyu", "Miso", "Shio"]
        }
      },
      "üé¨ Mit n√©zz√ºnk?": {
        items: [
          "üé¨ Akci√≥",
          "üòÇ V√≠gj√°t√©k", 
          "üíï Romantikus",
          "üëª Horror",
          "üöÄ Sci-fi",
          "üé≠ Dr√°ma"
        ],
        subtopics: {
          "üé¨ Akci√≥": ["Marvel", "DC", "Hal√°los iramban", "Mission Impossible"],
          "üòÇ V√≠gj√°t√©k": ["Kom√©dia", "Romantikus v√≠gj√°t√©k", "Szat√≠ra", "Par√≥dia"],
          "üíï Romantikus": ["Szerelmes", "Dr√°mai", "Id≈ëutaz√°sos", "Kar√°csonyi"],
          "üëª Horror": ["Pszichol√≥giai", "Slasher", "Supernatural", "Zombie"],
          "üöÄ Sci-fi": ["≈∞rutaz√°s", "Id≈ëutaz√°s", "Robotok", "Dystopia"],
          "üé≠ Dr√°ma": ["T√∂rt√©nelmi", "B√≠r√≥s√°gi", "Csal√°di", "H√°bor√∫s"]
        }
      },
      "‚úàÔ∏è Hov√° menj√ºnk?": {
        items: [
          "üèñÔ∏è Tengerpart",
          "üèîÔ∏è Hegyek",
          "üèôÔ∏è Nagyv√°ros",
          "üå≥ Term√©szet",
          "üèõÔ∏è T√∂rt√©nelmi helyek",
          "üé° Sz√≥rakoz√≥park"
        ],
        subtopics: {
          "üèñÔ∏è Tengerpart": ["Mediterr√°n", "Tr√≥pusi", "√âszaki-tenger", "Fekete-tenger"],
          "üèîÔ∏è Hegyek": ["Alpok", "T√°tra", "Himal√°ja", "Szikl√°s-hegys√©g"],
          "üèôÔ∏è Nagyv√°ros": ["Eur√≥pai f≈ëv√°ros", "Amerikai nagyv√°ros", "√Åzsiai metropolisz", "Ausztr√°l v√°ros"],
          "üå≥ Term√©szet": ["Nemzeti park", "Es≈ëerd≈ë", "Szavanna", "Sivatag"],
          "üèõÔ∏è T√∂rt√©nelmi helyek": ["Antik romok", "V√°rak", "M√∫zeumok", "Vall√°si helyek"],
          "üé° Sz√≥rakoz√≥park": ["Disneyland", "Universal", "Eur√≥pai park", "V√≠zipark"]
        }
      },
      "üéµ Mit hallgassunk?": {
        items: [
          "üé∏ Rock",
          "üé§ Pop",
          "üéß Elektronikus",
          "üé∫ Jazz",
          "üéª Klasszikus",
          "ü•Å Hip-hop"
        ],
        subtopics: {
          "üé∏ Rock": ["Alternat√≠v", "Metal", "Punk", "Indie"],
          "üé§ Pop": ["Mainstream", "K-pop", "Retro", "Indie pop"],
          "üéß Elektronikus": ["House", "Techno", "Dubstep", "Ambient"],
          "üé∫ Jazz": ["Smooth", "Bebop", "Fusion", "Swing"],
          "üéª Klasszikus": ["Barokk", "Romantikus", "Modern", "Opera"],
          "ü•Å Hip-hop": ["Old school", "Trap", "Conscious", "Drill"]
        }
      },
      "üéÆ Mit j√°tsszunk?": {
        items: [
          "üéØ Akci√≥",
          "üß© Puzzle",
          "üèéÔ∏è Verseny",
          "‚öîÔ∏è RPG",
          "üèóÔ∏è √âp√≠t√©s",
          "‚öΩ Sport"
        ],
        subtopics: {
          "üéØ Akci√≥": ["FPS", "Hack & Slash", "Battle Royale", "Platformer"],
          "üß© Puzzle": ["Logic", "Match-3", "Escape room", "Brain training"],
          "üèéÔ∏è Verseny": ["Formula", "Rally", "Arcade", "Szimul√°tor"],
          "‚öîÔ∏è RPG": ["Fantasy", "Sci-fi", "JRPG", "Action RPG"],
          "üèóÔ∏è √âp√≠t√©s": ["City builder", "Sandbox", "Survival", "Management"],
          "‚öΩ Sport": ["Futball", "Kos√°rlabda", "Tenisz", "Extr√©m sport"]
        }
      }
    };
    
    // Minden t√©m√°t felt√∂lt√ºnk a Firestore-ba
    const batch = db.batch();
    
    for (const [topicName, topicData] of Object.entries(topicsWithSubtopics)) {
      const topicRef = db.collection("topics").doc(topicName);
      batch.set(topicRef, {
        items: topicData.items,
        subtopics: topicData.subtopics,
        created_at: firebase.firestore.FieldValue.serverTimestamp(),
        version: "2.0_with_subtopics"
      });
      console.log(`üìö [INIT-DB] "${topicName}" t√©ma el≈ëk√©sz√≠tve - ${topicData.items.length} f≈ë elem, ${Object.keys(topicData.subtopics).length} subtopic csoport`);
    }
    
    // Batch v√©grehajt√°s
    await batch.commit();
    
    console.log(`‚úÖ [INIT-DB] ${Object.keys(topicsWithSubtopics).length} t√©ma sikeresen felt√∂ltve subtopicokkal!`);
    
    // Visszajelz√©s
    alert(`üéâ DB INICIALIZ√ÅL√ÅS K√âSZ!\n\nL√©trehozva:\n- ${Object.keys(topicsWithSubtopics).length} t√©ma\n- Subtopicok minden t√©m√°hoz\n\nOldal √∫jrat√∂lt√©se...`);
    
    // Adatb√°zis dump
    setTimeout(() => logDatabaseContents(), 1000);
    
    // Oldal √∫jrat√∂lt√©se
    setTimeout(() => window.location.reload(), 2000);
    
  } catch (error) {
    console.error(`‚ùå [INIT-DB] Hiba az adatb√°zis inicializ√°l√°sban`, error);
    alert(`‚ùå Hiba t√∂rt√©nt: ${error.message}`);
  }
}

// Rejtett kattint√°s sz√°ml√°l√≥
let secretClickCount = 0;
let secretClickTimer = null;

function handleSecretClick() {
  secretClickCount++;
  console.log(`ü§´ [SECRET] Rejtett kattint√°s ${secretClickCount}/5`);
  
  // Timer t√∂rl√©se √©s √∫jraind√≠t√°sa
  if (secretClickTimer) {
    clearTimeout(secretClickTimer);
  }
  
  // Ha 5 kattint√°s 3 m√°sodpercen bel√ºl
  if (secretClickCount >= 5) {
    console.log(`üî• [SECRET] 5 kattint√°s el√©rve - admin cleanup aktiv√°l√°sa!`);
    secretClickCount = 0;
    secretAdminCleanup();
    return;
  }
  
  // 3 m√°sodperc ut√°n reset
  secretClickTimer = setTimeout(() => {
    console.log(`‚è∞ [SECRET] Timeout - counter reset`);
    secretClickCount = 0;
  }, 3000);
}

// Glob√°lis debug funkci√≥
window.dbDump = logDatabaseContents;
window.initDB = initializeTopicsWithSubtopics;
window.handleSecretClick = handleSecretClick;

// 1 m√°sodperc m√∫lva ki√≠rjuk az adatb√°zis tartalmat
setTimeout(logDatabaseContents, 1000);

console.log(`üîß [DEBUG] Haszn√°ld: window.dbDump() a teljes adatb√°zis dump-hoz`);
console.log(`üîß [ADMIN] Haszn√°ld: window.initDB() az adatb√°zis inicializ√°l√°shoz subtopicokkal`);
console.log(`‚ö†Ô∏è [ADMIN] FONTOS: El≈ësz√∂r t√∂r√∂lj minden topics dokumentumot a Firestore Console-ban!`);
