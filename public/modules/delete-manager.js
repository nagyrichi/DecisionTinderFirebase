// T√∂rl√©s funkci√≥k modul

// Hossz√∫ nyom√°s t√∂rl√©s
function addLongPressDeleteListener(listItem, itemName) {
  let pressTimer = null;
  let startTime = 0;
  
  const startPress = (event) => {
    event.stopPropagation(); // Megakad√°lyozzuk az esem√©ny bubor√©kol√°s√°t
    startTime = Date.now();
    pressTimer = setTimeout(() => {
      // 800ms ut√°n megk√©rdezz√ºk
      if (confirm(`Biztosan t√∂rl√∂d: "${itemName}"?`)) {
        console.log(`üóëÔ∏è [LONGPRESS] User meger≈ës√≠tette a t√∂rl√©st: "${itemName}"`);
        deleteItemFromFirestore(itemName);
      } else {
        console.log(`üö´ [LONGPRESS] User lemondta a t√∂rl√©st: "${itemName}"`);
      }
    }, 800); // 800ms hossz√∫ nyom√°s
  };
  
  const cancelPress = (event) => {
    if (event) event.stopPropagation(); // Megakad√°lyozzuk az esem√©ny bubor√©kol√°s√°t
    if (pressTimer) {
      clearTimeout(pressTimer);
      pressTimer = null;
    }
  };
  
  // Mouse esem√©nyek
  listItem.addEventListener('mousedown', startPress);
  listItem.addEventListener('mouseup', cancelPress);
  listItem.addEventListener('mouseleave', cancelPress);
  
  // Touch esem√©nyek
  listItem.addEventListener('touchstart', startPress, { passive: false }); // passive: false hogy stopPropagation m≈±k√∂dj√∂n
  listItem.addEventListener('touchend', cancelPress);
  listItem.addEventListener('touchcancel', cancelPress);
  listItem.addEventListener('touchmove', cancelPress); // Ha mozog, t√∂rlj√ºk
}

// Egyszer≈± t√∂rl√©s funkci√≥
async function deleteItemFromFirestore(item) {
  try {
    console.log(`üóëÔ∏è [DELETE] Elem t√∂rl√©se megkezdve: "${item}"`);

    // Ellen≈ërizz√ºk, hogy f≈ët√©ma vagy subtopic-e
    let isMainTopic = false;
    let isSubtopic = false;
    let parentMainTopic = null;
    
    // FRISS√çTVE: topics objektum √∫j strukt√∫r√°ja miatt .items kell
    const mainTopics = window.topics[window.currentTopic]?.items || [];
    
    if (mainTopics.includes(item)) {
      isMainTopic = true;
      console.log(`üìã [DELETE] "${item}" f≈ët√©ma t√∂rl√©se`);
    } else {
      // Keress√ºk meg, hogy melyik f≈ët√©ma subtopicja
      for (const mainTopic of mainTopics) {
        const subtopics = window.subtopicManager.getSubtopicsForItem(mainTopic);
        if (subtopics.includes(item)) {
          isSubtopic = true;
          parentMainTopic = mainTopic;
          console.log(`üìã [DELETE] "${item}" subtopic t√∂rl√©se (sz√ºl≈ë: "${parentMainTopic}")`);
          break;
        }
      }
    }

    // Lok√°lis t√∂rl√©s
    if (window.votes[item]) {
      delete window.votes[item];
      console.log(`üßπ [DELETE] Lok√°lis vote t√∂r√∂lve: "${item}"`);
    }
    
    // Subtopic votes tiszt√≠t√°sa
    if (isMainTopic && window.subtopicVotes[item]) {
      delete window.subtopicVotes[item];
      console.log(`üßπ [DELETE] Subtopic votes t√∂r√∂lve: "${item}"`);
    } else if (isSubtopic && window.subtopicVotes[parentMainTopic] && window.subtopicVotes[parentMainTopic][item]) {
      delete window.subtopicVotes[parentMainTopic][item];
      console.log(`üßπ [DELETE] Subtopic vote t√∂r√∂lve: "${parentMainTopic}" -> "${item}"`);
    }
    
    window.accepted = window.accepted.filter(i => i !== item);
    window.decidedItems.delete(item);
    window.userAddedItems.delete(item);
    
    console.log(`üìù [DELETE] Lok√°lis adatok friss√≠tve - elfogadottak: [${window.accepted.join(', ')}]`);

    // Firestore t√∂rl√©s
    if (isMainTopic) {
      // F≈ët√©ma t√∂rl√©se a topics-b√≥l
      await db.collection("topics").doc(window.currentTopic).update({
        items: firebase.firestore.FieldValue.arrayRemove(item),
        [`subtopics.${item}`]: firebase.firestore.FieldValue.delete()
      });
      console.log(`üî• [DELETE] F≈ët√©ma √©s subtopicjai t√∂r√∂lve a Firestore-b√≥l: "${item}"`);
    } else if (isSubtopic && parentMainTopic) {
      // Subtopic t√∂rl√©se
      await db.collection("topics").doc(window.currentTopic).update({
        [`subtopics.${parentMainTopic}`]: firebase.firestore.FieldValue.arrayRemove(item)
      });
      console.log(`üî• [DELETE] Subtopic t√∂r√∂lve a Firestore-b√≥l: "${parentMainTopic}" -> "${item}"`);
    }
    
    // Adatb√°zis dump t√∂rl√©s ut√°n
    setTimeout(() => window.dbDump(), 500);

    // Swipes friss√≠t√©se
    await window.votesModule.sendSwipes();

    // Lok√°lis topics objektum friss√≠t√©se
    if (window.topics[window.currentTopic]) {
      if (isMainTopic) {
        window.topics[window.currentTopic].items = window.topics[window.currentTopic].items.filter(i => i !== item);
        if (window.topics[window.currentTopic].subtopics && window.topics[window.currentTopic].subtopics[item]) {
          delete window.topics[window.currentTopic].subtopics[item];
        }
      } else if (isSubtopic && parentMainTopic) {
        if (window.topics[window.currentTopic].subtopics && window.topics[window.currentTopic].subtopics[parentMainTopic]) {
          window.topics[window.currentTopic].subtopics[parentMainTopic] = window.topics[window.currentTopic].subtopics[parentMainTopic].filter(s => s !== item);
        }
      }
      console.log(`üîÑ [DELETE] Lok√°lis topics objektum friss√≠tve`);
    }

    console.log(`‚úÖ [DELETE] "${item}" sikeresen t√∂r√∂lve mindenhonnan - realtime sync aktiv√°lva`);
  } catch (error) {
    console.error(`‚ùå [DELETE] Hiba az elem t√∂rl√©sekor: "${item}"`, error);
  }
}

// Export
window.deleteModule = {
  addLongPressDeleteListener,
  deleteItemFromFirestore
};
