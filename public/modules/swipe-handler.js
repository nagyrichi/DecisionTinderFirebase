// Swipe kezel√©s modul

// Swipe kezel√©se
function handleSwipe(yes, fromGesture = false) {
  const item = window.currentItems[window.currentIndex];
  window.decidedItems.add(item);

  console.log(`üëçüëé [SWIPE] Szavazat - "${item}": ${yes ? 'IGEN' : 'NEM'} (${window.currentIndex + 1}/${window.currentItems.length})`);

  // Szavazat ment√©se a votes objektumba
  window.votes[item] = yes ? "yes" : "no";

  const card = document.getElementById("card");
  
  if (fromGesture) {
    // Gesture-b≈ël j√∂n: t√∂rlj√ºk a gesture event listener-eket hogy ne interfer√°ljanak
    card.onmousedown = null;
    card.onmousemove = null;
    card.onmouseup = null;
    card.ontouchstart = null;
    card.ontouchmove = null;
    card.ontouchend = null;
    
    // Gesture anim√°ci√≥ - folytatja a jelenlegi poz√≠ci√≥b√≥l
    card.classList.add(yes ? "swipe-right" : "swipe-left");
  } else {
    // Button-b≈ël j√∂n: k√ºl√∂nb√∂z≈ë anim√°ci√≥ oszt√°ly
    card.classList.add(yes ? "button-swipe-right" : "button-swipe-left");
  }

  setTimeout(() => {
    if (yes && !window.accepted.includes(item)) {
      window.accepted.push(item);
      console.log(`‚úÖ [SWIPE] "${item}" hozz√°adva az elfogadott list√°hoz`);
      
      // √öJ: Ha IGEN szavazat, √©s van subtopic, akkor besz√∫rjuk ≈ëket a list√°ba
      const subtopics = window.subtopicManager.getSubtopicsForItem(item);
      console.log(`üîç [SWIPE-DEBUG] "${item}" ellen≈ërz√©se - currentTopic: "${window.currentTopic}"`);
      console.log(`üîç [SWIPE-DEBUG] El√©rhet≈ë topics objektum:`, window.topics);
      console.log(`üîç [SWIPE-DEBUG] Aktu√°lis topic adatok:`, window.topics[window.currentTopic]);
      
      if (subtopics.length > 0) {
        console.log(`üîÄ [SUBTOPIC] "${item}" igen szavazat - ${subtopics.length} subtopic besz√∫r√°sa`);
        
        // Keverj√ºk meg a subtopicokat
        const shuffledSubtopics = [...subtopics];
        window.utils.shuffle(shuffledSubtopics);
        
        // Besz√∫rjuk a subtopicokat a currentIndex+1 poz√≠ci√≥t√≥l
        window.currentItems.splice(window.currentIndex + 1, 0, ...shuffledSubtopics);
        
        // FONTOS: Elt√°vol√≠tjuk a f≈ët√©m√°t a list√°b√≥l, hogy ne jelenjen meg √∫jra
        const remainingItems = window.currentItems.filter((currentItem, index) => 
          index <= window.currentIndex || currentItem !== item
        );
        window.currentItems = remainingItems;
        
        console.log(`üóëÔ∏è [SUBTOPIC] F≈ët√©ma "${item}" elt√°vol√≠tva a list√°b√≥l (subtopicok besz√∫rva)`);
        console.log(`üìã [SUBTOPIC] Subtopicok besz√∫rva: [${shuffledSubtopics.join(', ')}]`);
        console.log(`üìä [SUBTOPIC] √öj lista hossz: ${window.currentItems.length}`);
        console.log(`üìÑ [SUBTOPIC] Teljes currentItems lista:`, window.currentItems);
      } else {
        console.log(`‚ö†Ô∏è [SUBTOPIC] "${item}" - nincs subtopic, besz√∫r√°s kihagyva`);
      }
    } else if (!yes) {
      // √öJ: Ha NEM szavazat, minden subtopicot automatikusan "no"-ra √°ll√≠tunk
      const subtopics = window.subtopicManager.getSubtopicsForItem(item);
      if (subtopics.length > 0) {
        console.log(`‚ùå [SUBTOPIC] "${item}" nem szavazat - ${subtopics.length} subtopic automatikus elutas√≠t√°sa`);
        
        subtopics.forEach(subtopic => {
          window.votes[subtopic] = "no";
        });
        
        console.log(`üìã [SUBTOPIC] Subtopicok elutas√≠tva: [${subtopics.join(', ')}]`);
      }
    }
    
    window.currentIndex++;
    if (window.currentIndex >= window.currentItems.length) {
      console.log(`üì§ [SWIPE] Szavaz√°s befejezve, eredm√©nyek k√ºld√©se - elfogadott: [${window.accepted.join(', ')}]`);
      window.votesModule.sendSwipes().then(() => {
        window.utils.showScreen("screen-match");
        checkMatch();
      });
    } else {
      showNextItem();
    }
  }, fromGesture ? 400 : 350); // Button eset√©n r√∂videbb v√°rakoz√°s
}

// K√∂vetkez≈ë elem megjelen√≠t√©se
function showNextItem() {
  const card = document.getElementById("card");
  if (window.currentIndex >= window.currentItems.length) {
    console.log(`üèÅ [SWIPE] Minden elem eld√∂ntve (${window.currentItems.length}/${window.currentItems.length}), √°tv√°lt√°s match k√©perny≈ëre`);
    window.utils.showScreen("screen-match");
    return;
  }
  
  const item = window.currentItems[window.currentIndex];
  console.log(`üëÄ [SWIPE] K√∂vetkez≈ë elem megjelen√≠t√©se - ${window.currentIndex + 1}/${window.currentItems.length}: "${item}"`);
  
  document.getElementById("itemText").innerText = item;
  
  // TELJES RESET - elt√°vol√≠tjuk MINDEN oszt√°lyt √©s st√≠lust
  card.className = 'card text-center shadow-lg';
  
  // Speci√°lisan elt√°vol√≠tjuk az √∂sszes anim√°ci√≥ oszt√°lyt
  card.classList.remove('swipe-left', 'swipe-right', 'button-swipe-left', 'button-swipe-right');
  
  // √ñsszes anim√°ci√≥ √©s inline st√≠lus t√∂rl√©se
  card.style.cssText = '';
  
  // Alap√©rtelmezett st√≠lusok be√°ll√≠t√°sa
  card.style.transform = 'translate3d(0, 0, 0) rotate(0deg)';
  card.style.opacity = '1';
  card.style.transition = '';
  card.style.animation = '';
  
  // Force reflow t√∂bb l√©p√©sben
  card.offsetHeight;
  
  // Random gradient oszt√°ly hozz√°ad√°sa
  const gradientNumber = Math.floor(Math.random() * 8) + 1;
  card.classList.add(`gradient-${gradientNumber}`);
  console.log(`üé® [SWIPE] K√°rtya gradient: gradient-${gradientNumber}`);
  
  // M√©g egy reflow a gradient ut√°n
  card.offsetHeight;
  
  // Setup gesture a teljes reset ut√°n
  setTimeout(() => {
    setupSwipeGesture(card);
  }, 100); // Nagyobb delay a biztons√°g kedv√©√©rt
}

// Swipe gesztus be√°ll√≠t√°sa
function setupSwipeGesture(card) {
  let startX = 0, currentX = 0, isDragging = false;
  
  // Clean up any existing event listeners
  card.onmousedown = null;
  card.onmousemove = null;
  card.onmouseup = null;
  card.ontouchstart = null;
  card.ontouchmove = null;
  card.ontouchend = null;
  
  const onDragStart = (clientX) => { 
    isDragging = true; 
    startX = clientX; 
    // iOS fix: Force stop any running animations
    card.style.animation = 'none';
    card.style.transition = 'none'; 
    // Force reflow to ensure changes are applied
    card.offsetHeight;
  };
  
  const onDragMove = (clientX) => { 
    if (!isDragging) return; 
    currentX = clientX - startX; 
    // iOS optimized transform
    card.style.transform = `translate3d(${currentX}px, 0, 0) rotate(${currentX / 20}deg)`;
  };
  
  const onDragEnd = () => {
    if (!isDragging) return; 
    isDragging = false;
    const threshold = card.offsetWidth * 0.4;
    
    if (currentX > threshold) {
      // IGEN swipe - azonnal √°tadjuk a CSS anim√°ci√≥nak
      card.style.transition = 'none';
      card.style.transform = `translate3d(${currentX}px, 0, 0) rotate(${currentX / 20}deg)`;
      handleSwipe(true, true); // fromGesture = true
    } else if (currentX < -threshold) {
      // NEM swipe - azonnal √°tadjuk a CSS anim√°ci√≥nak  
      card.style.transition = 'none';
      card.style.transform = `translate3d(${currentX}px, 0, 0) rotate(${currentX / 20}deg)`;
      handleSwipe(false, true); // fromGesture = true
    } else { 
      // Return to center with smooth animation
      card.style.transition = 'transform 0.3s ease'; 
      card.style.transform = 'translate3d(0, 0, 0) rotate(0deg)';
    }
    currentX = 0;
  };
  
  // Mouse events
  card.onmousedown = (e) => {
    e.preventDefault();
    onDragStart(e.clientX);
  };
  card.onmousemove = (e) => isDragging && onDragMove(e.clientX);
  card.onmouseup = () => isDragging && onDragEnd();
  
  // Touch events with iOS optimizations
  card.ontouchstart = (e) => {
    e.preventDefault(); // Prevent iOS bounce/scroll
    onDragStart(e.touches[0].clientX);
  };
  card.ontouchmove = (e) => {
    e.preventDefault(); // Prevent iOS bounce/scroll
    if (e.touches.length === 1) { // Only single touch
      onDragMove(e.touches[0].clientX);
    }
  };
  card.ontouchend = (e) => {
    e.preventDefault(); // Prevent iOS bounce/scroll
    onDragEnd();
  };
  
  // iOS specific: prevent touch callout and selection
  card.style.webkitTouchCallout = 'none';
  card.style.webkitUserSelect = 'none';
  card.style.userSelect = 'none';
}

// Match ellen≈ërz√©s (√ºres f√ºggv√©ny, a listener automatikusan friss√≠t)
function checkMatch() {
  console.log(`üîç [MATCH] Match ellen≈ërz√©s h√≠vva - a realtime listener automatikusan friss√≠ti az eredm√©nyeket`);
}

// Export
window.swipeModule = {
  handleSwipe,
  showNextItem,
  setupSwipeGesture,
  checkMatch
};
