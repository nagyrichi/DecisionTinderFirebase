// Subtopic kezel≈ë modul

// Subtopic UI seg√©df√ºggv√©ny: teljes lista √∫jrasz√°m√≠t√°sa
function recalculateAllMargins() {
  const allItems = document.querySelectorAll('#ownVotes .main-topic-item');
  
  // EGYSZER≈∞ MEGOLD√ÅS: t√∂r√∂lj√ºk az √∂sszes margint!
  // Az altopicok term√©szetesen elfoglalj√°k a hely√ºket a DOM-ban,
  // nem kell k√ºl√∂n margint hozz√°adni!
  allItems.forEach(item => {
    item.style.marginTop = '';
  });
  
  console.log(`üìê [SUBTOPIC] Minden margin t√∂r√∂lve - a DOM term√©szetes flow-ja kezeli a pozicion√°l√°st`);
}

// F≈ët√©ma hozz√°ad√°sa Firestore-hoz
async function addMainTopicToFirestore(mainTopic) {
  try {
    console.log(`‚ûï [MAIN-TOPIC] √öj f≈ët√©ma hozz√°ad√°sa Firestore-hoz: "${mainTopic}"`);
    
    // Jel√∂lj√ºk, hogy ez a user adta hozz√°
    window.userAddedItems.add(mainTopic);
    
    // Firestore-ban friss√≠tj√ºk a f≈ët√©m√°k list√°j√°t
    await db.collection("topics").doc(window.currentTopic).update({
      items: firebase.firestore.FieldValue.arrayUnion(mainTopic)
    });
    
    console.log(`‚úÖ [MAIN-TOPIC] "${mainTopic}" sikeresen hozz√°adva a Firestore-hoz`);
  } catch (error) {
    console.error(`‚ùå [MAIN-TOPIC] Hiba a f≈ët√©ma hozz√°ad√°sakor`, error);
    alert(`Hiba t√∂rt√©nt: ${error.message}`);
  }
}

// Subtopic hozz√°ad√°sa Firestore-hoz
async function addSubtopicToFirestore(mainTopic, subtopic) {
  try {
    console.log(`‚ûï [SUBTOPIC] √öj subtopic hozz√°ad√°sa Firestore-hoz: "${subtopic}" -> "${mainTopic}"`);
    
    // Jel√∂lj√ºk, hogy ez a user adta hozz√°
    window.userAddedItems.add(subtopic);
    
    // Firestore-ban friss√≠tj√ºk a subtopicok list√°j√°t
    const updatePath = `subtopics.${mainTopic}`;
    await db.collection("topics").doc(window.currentTopic).update({
      [updatePath]: firebase.firestore.FieldValue.arrayUnion(subtopic)
    });
    
    // Ha a f≈ët√©ma igen szavazatot kapott, akkor az alt√©ma is automatikusan igen
    if (window.votes[mainTopic] === "yes") {
      if (!window.subtopicVotes[mainTopic]) window.subtopicVotes[mainTopic] = {};
      window.subtopicVotes[mainTopic][subtopic] = "yes";
      console.log(`‚úÖ [SUBTOPIC] "${subtopic}" automatikusan elfogadva, mert "${mainTopic}" elfogadva`);
      
      // Szavazatok ment√©se
      await window.votesModule.sendSwipes();
    }
    
    console.log(`‚úÖ [SUBTOPIC] "${subtopic}" sikeresen hozz√°adva a Firestore-hoz`);
  } catch (error) {
    console.error(`‚ùå [SUBTOPIC] Hiba a subtopic hozz√°ad√°sakor`, error);
    alert(`Hiba t√∂rt√©nt: ${error.message}`);
  }
}

// Subtopic hozz√°ad√°sa lok√°lisan
function addSubtopic(mainTopic, subtopic) {
  console.log(`‚ûï [SUBTOPIC] √öj subtopic hozz√°ad√°sa: "${subtopic}" -> "${mainTopic}"`);
  
  // Ha a f≈ët√©ma igen szavazatot kapott, akkor az alt√©ma is automatikusan igen
  if (window.votes[mainTopic] === "yes") {
    if (!window.subtopicVotes[mainTopic]) window.subtopicVotes[mainTopic] = {};
    window.subtopicVotes[mainTopic][subtopic] = "yes";
    console.log(`‚úÖ [SUBTOPIC] "${subtopic}" automatikusan elfogadva, mert "${mainTopic}" elfogadva`);
  }
}

// Subtopic szavazat v√°lt√°sa
function toggleSubtopicVote(mainTopic, subtopic) {
  // Subtopic szavazat v√°lt√°sa
  if (!window.subtopicVotes[mainTopic]) window.subtopicVotes[mainTopic] = {};
  
  const currentSubVote = window.subtopicVotes[mainTopic][subtopic];
  const newSubVote = currentSubVote === "yes" ? "no" : "yes";
  
  window.subtopicVotes[mainTopic][subtopic] = newSubVote;
  
  // F≈ëszavazatban is friss√≠tj√ºk (fallback kompatibilit√°s)
  window.votes[subtopic] = newSubVote;
  
  console.log(`üîÑ [SUBTOPIC] "${subtopic}" szavazat v√°lt√°sa: ${currentSubVote || 'nincs'} ‚Üí ${newSubVote}`);
  
  // Friss√≠tj√ºk a szavazatokat a szerveren
  window.votesModule.sendSwipes();
}

// Subtopicok lek√©r√©se egy elemhez
function getSubtopicsForItem(item) {
  // FRISS√çTVE: Firebase-b≈ël olvassuk be a subtopicokat
  const currentTopicData = window.topics[window.currentTopic];
  console.log(`üîç [SUBTOPIC-GET] Subtopicok lek√©r√©se - item: "${item}", currentTopic: "${window.currentTopic}"`);
  console.log(`üîç [SUBTOPIC-GET] El√©rhet≈ë subtopicok:`, currentTopicData?.subtopics);
  
  if (currentTopicData && currentTopicData.subtopics && currentTopicData.subtopics[item]) {
    const result = currentTopicData.subtopics[item];
    console.log(`‚úÖ [SUBTOPIC-GET] "${item}" subtopicjai: [${result.join(', ')}]`);
    return result;
  }
  
  // Fallback: ha nincs subtopic adat, √ºres t√∂mb
  console.log(`‚ö†Ô∏è [SUBTOPIC-GET] "${item}" - nincs subtopic adat`);
  return [];
}

// Export
window.subtopicManager = {
  recalculateAllMargins,
  addMainTopicToFirestore,
  addSubtopicToFirestore,
  addSubtopic,
  toggleSubtopicVote,
  getSubtopicsForItem
};
